<?php

define('COL_START'      , 'B');      // The first significant column in xlsx
define('COL_END'        , 'D');      // The last column in xlsx
define('COL_VISIBILITY' , 'I'); // The column that toggles visibility in xlsx

require_once 'lib/PHPExcel/Classes/PHPExcel/IOFactory.php';

function pc_menu() {
    $items['admin/property-compendium'] = array(
        'title' => 'Property compendium',
        'description' => 'Upload and manage property compendium data',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('pc_upload_form'),
        'access callback' => true
    );

    $items['property-portfolio/profiles/%pc_property'] = array(
        'title callback' => 'pc_title',
        'title arguments' => array(2),
        'page callback' => 'pc_property_page',
        'page arguments' => array(2),
        'access callback' => true
    );

    return $items;
}

function pc_property_load($string) {

}

function pc_title($pc_property) {

}

function pc_property_page($pc_property) {

}

function pc_upload_form($form, &$form_state) {

    $form = array();

    $fid = variable_get('compendium', false);

    if ($fid == false) {
            $instruction = '<h1>Upload property compendium file. xlsx or xlsm</h1>';
    } else {
            $instruction = "<h1>You already have a compendium file.</h1><h1>Only upload a new file if you want to replace the current compendium file. </h1>";
    }

    $form['instruction'] = array(
        '#markup' => $instruction
    );

    $form['compendium'] = array(
        '#title' => t('Choose property compendium file'),
        '#type' => 'file'
    );

    $form['submit'] = array(
        '#value' => t('Upload'),
        '#type' => 'submit'
    );

    return $form;
}

function pc_upload_form_validate($form, &$form_state) {
    $validators = array(
        'file_validate_extensions' => array('xlsx xlsm')
    );
    $mFile = file_save_upload('compendium', $validators, 'public://');

    if ($mFile == false) {
        form_set_error('compendium', 'Need to select a file');
    }
}

function pc_upload_form_submit($form, &$form_state) {
    $mFile = file_save_upload('compendium');
    variable_set('compendium', $mFile->fid);
}

function pc_read_excel($file) {
    $objPHPExcel = PHPExcel_IOFactory::load($file);

    $sheets = $objPHPExcel->getSheetCount();

    pc_process_sheet($objPHPExcel->getSheet(0));
}

function pc_process_sheet($sheet) {
    $rowmax = $sheet->getHighestRow();

    $parse = new Parse();

    for ($row = 1; $row <=$rowmax; $row++) {
        // read row of data into an array
        $rowData = $sheet->rangeToArray(COL_START . $row . ':'. COL_END . $row,
            NULL,
            TRUE,
            FALSE);

        $parse->processRow($rowData[0]);
    }
    dpm($parse->property_name);
}

class Parse {

    private $currentRowData;
    private $state;

    // States
    const State_Title       = 'title';
    const State_Table       = 'table';
    const State_TableNew    = 'tablenew';
    const State_None        = 'none';
    const State_GraphNew    = 'graphnew';
    const State_Graph       = 'graph';
    const State_CentreNew   = 'centrenew';
    const State_Centre      = 'centre';

    // Events
    const Event_IsRow          = 0x1;
    const Event_IsEmptyRow     = 0x2;
    const Event_IsGraphData    = 0x4;
    const Event_IsTitle        = 0x8;
    const Event_IsTableHeading = 0x10;
    const Event_IsCentreNew    = 0x20;

    // Actions
    function action_title() {
        $this->property_name = $this->currentRowData[0];
    }
    function action_none() {
        // todo
    }
    function action_table() {
        // todo
    }
    function action_tablenew() {
        // todo
    }
    function action_graph() {
        if ($this->currentRowData[1] > 0) {
            $this->graph[$this->currentRowData[0]] = $this->currentRowData[1];
        }
    }
    function action_graphnew() {
        // todo
    }

    function action_centre() {
        $this->centre_narrative = $this->currentRowData[0];
    }

    function action_centrenew() {

    }

    // State transition table
    // current state: events => new state
    public static $transition_table = array(
        self::State_Title       => array(self::Event_IsEmptyRow        => self::State_None,
                                         self::Event_IsTableHeading    => self::State_TableNew),

        self::State_TableNew    => array(self::Event_IsRow        => self::State_Table,
                                         self::Event_IsEmptyRow   => self::State_Table),

        self::State_Table       => array(self::Event_IsRow             => self::State_Table,
                                         self::Event_IsTableHeading    => self::State_TableNew,
                                         self::Event_IsGraphData       => self::State_GraphNew,
                                         self::Event_IsEmptyRow        => self::State_Table),

        self::State_None        => array(self::Event_IsRow             => self::State_TableNew,
                                         self::Event_IsTableHeading    => self::State_TableNew,
                                         self::Event_IsGraphData       => self::State_GraphNew,
                                         self::Event_IsTitle           => self::State_Title,
                                         self::Event_IsCentreNew       => self::State_CentreNew,
                                         self::Event_IsEmptyRow        => self::State_None),

        self::State_GraphNew    => array(self::Event_IsRow        => self::State_Graph),

        self::State_Graph       => array(self::Event_IsRow             => self::State_Graph,
                                         self::Event_IsEmptyRow        => self::State_None),

        self::State_CentreNew    => array(self::Event_IsRow           => self::State_Centre),

        self::State_Centre       => array(self::Event_IsRow           => self::State_Centre,
                                          self::Event_IsEmptyRow      => self::State_None),
    );

    // Fields
    public $property_name;
    public $centre_narrative;
    public $tables = array();
    public $graph = array();


    function __construct() {
        $this->state = self::State_None;
    }

    function processRow($rowData) {
        $this->currentRowData = $rowData;

        // transition the state
        $event = $this->getEvent();
        $this->state = self::$transition_table[$this->state][$event];

        // perform the action of this state
        $this->{'action_'.$this->state}();
    }

    function getEvent() {

        if ($this->property_name == null) {
            $this->property_name = 'hello';
            return self::Event_IsTitle;
        }

        if ($this->currentRowData[0] !== NULL && $this->currentRowData[1] === NULL && $this->currentRowData[2] === NULL) {
            switch ($this->currentRowData[0]) {
            case 'Data for Graph':
                return self::Event_IsGraphData;
                break;
            case 'Centre Narrative':
                return self::Event_IsCentreNew;
                break;
            default:
                return self::Event_IsTableHeading;
                break;
            }
        }

        if ($this->currentRowData[0] == NULL && $this->currentRowData[1] === NULL && $this->currentRowData[2] === NULL) {
            return self::Event_IsEmptyRow;
        }

        return self::Event_IsRow;
    }

    // Return property data after parsing
    public function propertyData() {
        return array(
            'centre_narrative' => $this->centre_narrative,
            'graph' => $this->graph
        );
    }
}
